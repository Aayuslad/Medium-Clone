// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  userName       String           @unique
  password       String
  bio            String           @default("")
  about          String           @default("")
  profileImg     String           @default("")
  stories        Story[]
  claps          Clap[]
  savedStories   SavedStory[]
  followers      Follow[]         @relation("UserFollowers")
  following      Follow[]         @relation("UserFollowing")
  followersCount Int              @default(0)
  followingCount Int              @default(0)
  readingHistory ReadingHistory[]
  followedTopics FollowedTopic[]
  responses      Response[]
  subResponses   SubResponse[]
  mutedAuthors   MutedAuthors[]   @relation("UserMutedAuthors")
  mutedBy        MutedAuthors[]   @relation("AuthorMutedBy")
}

model Story {
  id             String           @id @default(uuid())
  title          String           @default("")
  content        String           @default("")
  description    String           @default("")
  coverImg       String           @default("")
  postedOn       DateTime
  published      Boolean          @default(false)
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String
  topics         Topics[]
  claps          Clap[]
  savedBy        SavedStory[]
  clapsCount     Int              @default(0)
  responseCount  Int              @default(0)
  readingHistory ReadingHistory[]
  responses      Response[]
}

model Topics {
  id             String          @id @default(uuid())
  topic          String          @unique
  stories        Story[]
  followersCount Int             @default(0)
  storiesCount   Int             @default(0)
  FollowedTopic  FollowedTopic[]
}

model FollowedTopic {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String // Foreign key to User
  topic   Topics @relation(fields: [topicId], references: [id])
  topicId String // Foreign key to Topic
}

model Clap {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String // Foreign key to User
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId String
}

model SavedStory {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String // Foreign key to User
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId String // Foreign key to story
}

model MutedAuthors {
  id       String @id @default(uuid())
  user     User   @relation("UserMutedAuthors", fields: [userId], references: [id])
  userId   String // Foreign key to User
  author   User   @relation("AuthorMutedBy", fields: [authorId], references: [id])
  authorId String // Foreign key to User
}

model Follow {
  id          String @id @default(uuid())
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String // Foreign key to User
  following   User   @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String // Foreign key to User
  createdAt   DateTime @default(now())
}

model ReadingHistory {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String // Foreign key to User
  story   Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId String // Foreign key to Story
  readAt  DateTime @default(now())
}

model Response {
  id           String        @id @default(uuid())
  content      String
  postedAt     DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  userId       String // Foreign key to User
  story        Story         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId      String // Foreign key to Story
  replyCount   Int           @default(0)
  subResponses SubResponse[]
}

model SubResponse {
  id         String   @id @default(uuid())
  content    String
  postedAt   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String // Foreign key to User
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String // Foreign key to Response
}
