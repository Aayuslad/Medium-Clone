// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  userName       String       @unique
  password       String
  bio            String       @default("")
  about          String       @default("")
  profileImg     String       @default("")
  stories        Story[] // Establishing a one-to-many relationship
  claps          Clap[] // Establishing a many-to-many relationshiip
  savedStories   SavedStory[] // Establishing a many-to-many relationship
  followers      Follow[]     @relation("UserFollowers")
  following      Follow[]     @relation("UserFollowing")
  followersCount Int          @default(0) // Count of followers
  followingCount Int          @default(0) // Count of users followed by this user
}

model Story {
  id          String       @id @default(uuid())
  title       String       @default("")
  content     String       @default("")
  description String       @default("")
  coverImg    String       @default("")
  postedOn    DateTime
  published   Boolean      @default(false)
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  topics      Topics[]
  claps       Clap[]
  savedBy     SavedStory[]
  clapsCount  Int          @default(0)
}

model Topics {
  id      String  @id @default(uuid())
  topic   String  @unique
  stories Story[]
}

model Clap {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String // Foreign key to User
  story   Story  @relation(fields: [storyId], references: [id])
  storyId String // Foreign key to Story
}

model SavedStory {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String // Foreign key to User
  story   Story  @relation(fields: [storyId], references: [id])
  storyId String // Foreign key to story
}

model Follow {
  id          String @id @default(uuid())
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String // Foreign key to User
  following   User   @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String // Foreign key to User
}
